// Generated by CoffeeScript 1.7.1
(function() {
  var module,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module = angular.module("angular-clazz", []);

  module.provider("Clazz", function() {
    this.$get = function() {
      var OO;
      OO = {};
      OO.Ctrl = (function() {
        Ctrl.register = function(app, name) {
          var _ref;
          if (name == null) {
            name = this.name || ((_ref = this.toString().match(/function\s*(.*?)\(/)) != null ? _ref[1] : void 0);
          }
          if (typeof app === "string") {
            angular.module(app).controller(name, this);
          } else {
            app.controller(name, this);
          }
          return this;
        };

        Ctrl.inject = function() {
          var args, injectee, _i, _len, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _ref = ["$scope", "$element", "$attrs"];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            injectee = _ref[_i];
            if (args.indexOf(injectee === -1)) {
              args.push(injectee);
            }
          }
          this.$inject = args;
          return this;
        };

        Ctrl.mixin = function() {
          var Mixed, method, mixin, mixins, name, _fn, _i, _len, _ref;
          mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          Mixed = (function(_super) {
            __extends(Mixed, _super);

            function Mixed() {
              return Mixed.__super__.constructor.apply(this, arguments);
            }

            return Mixed;

          })(this);
          for (_i = 0, _len = mixins.length; _i < _len; _i++) {
            mixin = mixins[_i];
            _ref = mixin.prototype.by(-1);
            _fn = function() {
              var m, n, _m;
              m = method;
              _m = Mixed.prototype[name];
              n = name;
              if (name === "initialize" && (Mixed.prototype.initialize != null)) {
                return Mixed.prototype.initialize = function() {
                  m.call(this);
                  return _m.call(this);
                };
              } else {
                return Mixed.prototype[name] = method;
              }
            };
            for (name in _ref) {
              method = _ref[name];
              _fn();
            }
            for (name in mixin) {
              if (!__hasProp.call(mixin, name)) continue;
              method = mixin[name];
              if (angular.isFunction(method)) {
                Mixed[name] = method;
              }
            }
          }
          return Mixed;
        };

        function Ctrl() {
          var args, behaviour, fn, index, key, trigger, _i, _len, _ref, _ref1;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _ref = this.constructor.$inject;
          for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
            key = _ref[index];
            this[key] = args[index];
          }
          _ref1 = this.constructor.prototype;
          for (key in _ref1) {
            fn = _ref1[key];
            if (typeof fn === "function" && ["constructor", "initialize"].indexOf(key === -1 && key[0] !== "_")) {
              this.$scope[key] = (function(_this) {
                return function() {
                  var args;
                  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                  fn.apply(_this, args);
                  return _this;
                };
              })(this);
            }
          }
          for (trigger in this) {
            behaviour = this[trigger];
            if (trigger.match("::")) {
              (function(_this) {
                return (function(trigger, behaviour) {
                  var el, i, t, _j, _len1, _ref2, _results;
                  t = trigger.split("::");
                  _ref2 = Sizzle(t[0], _this.$element[0]);
                  _results = [];
                  for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
                    el = _ref2[i];
                    _results.push((function(el, i) {
                      return angular.element(el).on(t[1], function() {
                        var args;
                        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                        _this.$scope.n = i;
                        return behaviour.apply(_this, args);
                      });
                    })(el, i));
                  }
                  return _results;
                });
              })(this)(trigger, behaviour);
            }
          }
          if (typeof this.initialize === "function") {
            this.initialize();
          }
        }

        return Ctrl;

      })();
      return OO;
    };
    return null;
  });

}).call(this);
