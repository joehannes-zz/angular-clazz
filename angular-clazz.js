// Generated by CoffeeScript 1.9.0
(function() {
  var module,
    __slice = [].slice,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  module = angular.module("angular-clazz", []);

  module.provider("Clazz", function() {
    var AbstractOneshotDataService, OO;
    OO = {};
    OO.Injectable = (function() {
      function Injectable() {}

      Injectable.inject = function() {
        var args, injectee, _i, _len, _ref, _ref1;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref1 = __slice.call((_ref = this.$inject) != null ? _ref : []);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          injectee = _ref1[_i];
          if (args.indexOf(injectee) === -1) {
            args.push(injectee);
          }
        }
        this.$inject = args;
        return this;
      };

      return Injectable;

    })();
    OO.Ctrl = (function(_super) {
      __extends(Ctrl, _super);

      Ctrl.inject("$scope");

      Ctrl.register = function(app, name) {
        var _ref;
        if (name == null) {
          name = this.name || ((_ref = this.toString().match(/function\s*(.*?)\(/)) != null ? _ref[1] : void 0);
        }
        if (typeof app === "string") {
          angular.module(app).controller(name, this);
        } else {
          app.controller(name, this);
        }
        return this;
      };

      Ctrl.mixin = function() {
        var Mixed, method, mixin, mixins, name, _fn, _i, _len, _ref;
        mixins = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        Mixed = (function(_super1) {
          __extends(Mixed, _super1);

          function Mixed() {
            return Mixed.__super__.constructor.apply(this, arguments);
          }

          return Mixed;

        })(this);
        for (_i = 0, _len = mixins.length; _i < _len; _i++) {
          mixin = mixins[_i];
          _ref = mixin.prototype;
          _fn = function() {
            var m, n, _m;
            m = method;
            _m = Mixed.prototype[name];
            n = name;
            if (name === "initialize" && (Mixed.prototype.initialize != null)) {
              return Mixed.prototype.initialize = function() {
                m.call(this);
                return _m.call(this);
              };
            } else if (name !== "constructor" && (Mixed.prototype[name] == null)) {
              return Mixed.prototype[name] = m;
            }
          };
          for (name in _ref) {
            method = _ref[name];
            _fn();
          }
          for (name in mixin) {
            if (!__hasProp.call(mixin, name)) continue;
            method = mixin[name];
            if (angular.isFunction(method)) {
              Mixed[name] = method;
            }
          }
          Mixed.inject.apply(Mixed, mixin.$inject);
        }
        return Mixed;
      };

      Ctrl["implements"] = function() {
        var Interface, Interfaced, interfaces, _fn, _i, _len;
        interfaces = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        Interfaced = (function(_super1) {
          __extends(Interfaced, _super1);

          function Interfaced() {
            return Interfaced.__super__.constructor.apply(this, arguments);
          }

          return Interfaced;

        })(this);
        _fn = function(Interface) {
          return Interfaced.prototype[Interface] = function() {
            throw {
              msg: "Looks like the interface _" + Interface + "_ hasn't been implemented! This will lead to unpredictable behaviour!"
            };
          };
        };
        for (_i = 0, _len = interfaces.length; _i < _len; _i++) {
          Interface = interfaces[_i];
          _fn(Interface);
        }
        return Interfaced;
      };

      function Ctrl() {
        var args, fn, index, key, _i, _len, _ref, _ref1;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref = this.constructor.$inject;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          key = _ref[index];
          this[key] = args[index];
        }
        _ref1 = this.constructor.prototype;
        for (key in _ref1) {
          fn = _ref1[key];
          if (typeof fn === "function" && ["constructor", "initialize"].indexOf(key) === -1 && key[0] !== "_") {
            (function(_this) {
              return (function(key, fn) {
                var el, i, t, _j, _len1, _ref2, _ref3, _ref4, _ref5, _results;
                if (key.match("::")) {
                  t = key.split("::");
                  if ((t[2] != null) && t[2].indexOf(">") !== -1) {
                    t = t.splice(0, 2).concat(t[0].split(">"));
                  }
                  _ref5 = t[0] && $(t[0], (_ref2 = (_ref3 = _this.element) != null ? _ref3.context : void 0) != null ? _ref2 : document.body) || [(_ref4 = _this.$element) != null ? _ref4.context : void 0];
                  _results = [];
                  for (i = _j = 0, _len1 = _ref5.length; _j < _len1; i = ++_j) {
                    el = _ref5[i];
                    _results.push((function(el, i) {
                      var listenerO;
                      listenerO = [t[1]];
                      if (t[2] != null) {
                        listenerO.push(t[2]);
                      }
                      listenerO.push(function() {
                        var args, ev, j, _k, _len2, _ref6;
                        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                        if (t[2] != null) {
                          ev = args[0];
                          if (t[3] != null) {
                            _this.$scope.n = $(ev.currentTarget).closest(t[3]).index();
                          } else {
                            _ref6 = $(ev.currentTarget).parent().children().get();
                            for (j = _k = 0, _len2 = _ref6.length; _k < _len2; j = ++_k) {
                              el = _ref6[j];
                              if (el === ev.currentTarget) {
                                _this.$scope.n = j;
                              }
                            }
                          }
                        }
                        fn.apply(_this, args);
                        if (!_this.$scope.$$phase) {
                          return _this.$scope.$digest();
                        }
                      });
                      return angular.element(el).on.apply(angular.element(el), listenerO);
                    })(el, i));
                  }
                  return _results;
                } else {
                  return _this.$scope[key] = function() {
                    var args;
                    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                    fn.apply(_this, args);
                    return _this;
                  };
                }
              });
            })(this)(key, fn);
          }
        }
        if (typeof this.initialize === "function") {
          this.initialize();
        }
      }

      return Ctrl;

    })(OO.Injectable);
    OO.DynamicComponent = (function(_super) {
      __extends(DynamicComponent, _super);

      function DynamicComponent() {
        return DynamicComponent.__super__.constructor.apply(this, arguments);
      }

      DynamicComponent.inject("$element");

      DynamicComponent.prototype.initialize = function() {
        var Service, dataset, i, k, key, v, _fn, _i, _len, _ref, _ref1, _ref2, _ref3, _results;
        this.$scope.data = {};
        this.$scope.state = {
          loading: true,
          selected: null,
          busy: null,
          error: null
        };
        _ref1 = (_ref = this.transform) != null ? _ref : [];
        _fn = (function(_this) {
          return function(dataset, i) {
            var Service, p, _j, _len1, _ref2, _ref3;
            Service = _this[dataset.descriptor.capitalize() + "DataService"];
            _ref3 = (_ref2 = dataset.init) != null ? _ref2 : [];
            for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
              p = _ref3[_j];
              Service.aspect((function() {
                return Service.set(p);
              }), true);
            }
            return Service.aspect(function() {
              var _k, _len2, _ref4, _ref5, _results;
              _ref5 = (_ref4 = data.digest) != null ? _ref4 : [];
              _results = [];
              for (_k = 0, _len2 = _ref5.length; _k < _len2; _k++) {
                p = _ref5[_k];
                _results.push(Service.set(p));
              }
              return _results;
            });
          };
        })(this);
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          dataset = _ref1[i];
          _fn(dataset, i);
        }
        for (key in this) {
          Service = this[key];
          if (/DataService/.test(key)) {
            (function(_this) {
              return (function(key, Service) {
                var descriptor, _ref2;
                descriptor = key.remove("DataService").toLowerCase();
                Service.subscribe(_this._transform.bind(_this, descriptor));
                if (((_ref2 = Service.db) != null ? _ref2.ready : void 0) === true) {
                  return Service.digest();
                }
              });
            })(this)(key, Service);
          }
        }
        _ref2 = this.$scope.state;
        for (k in _ref2) {
          if (!__hasProp.call(_ref2, k)) continue;
          v = _ref2[k];
          if (v === true) {
            this.$element.addClass(key);
          }
        }
        _ref3 = this.$scope.state;
        _results = [];
        for (k in _ref3) {
          if (!__hasProp.call(_ref3, k)) continue;
          v = _ref3[k];
          _results.push((function(_this) {
            return function(k, v) {
              return _this.$scope.$watch("state." + k, function(n, o) {
                var _ref4;
                if (n === true && !_this.$element.hasClass(k)) {
                  _this.$element.addClass(k);
                } else if (_this.$element.hasClass(k)) {
                  _this.$element.removeClass(k);
                }
                if (o === n || ((o == null) && !n)) {
                  return;
                }
                return _this.$scope.$emit("state." + k, {
                  obj: (_ref4 = _this.toString().match(/function\s*(.*?)\(/)) != null ? _ref4[1] : void 0,
                  val: n
                });
              });
            };
          })(this)(k, v));
        }
        return _results;
      };

      DynamicComponent.prototype._transform = function(descriptor, db) {
        var _base, _base1, _ref, _ref1;
        if ((_base = this.$scope.data)[descriptor] == null) {
          _base[descriptor] = this[descriptor.substring(0, 1).toUpperCase() + descriptor.substring(1) + "DataService"].db.store;
        }
        if ((_base1 = this.$scope.data).current == null) {
          _base1.current = {};
        }
        this.$scope.data.current[descriptor] = (_ref = db.current) != null ? _ref : null;
        if (!((_ref1 = this.$scope.data[descriptor]) != null ? _ref1.length : void 0)) {
          console.warn("The dataset of " + descriptor + " was empty");
          return false;
        } else {
          return true;
        }
      };

      DynamicComponent.prototype._digest = function() {
        var e;
        try {
          return this.$scope.$digest();
        } catch (_error) {
          e = _error;
          return "hogus bogus";
        }
      };

      return DynamicComponent;

    })(OO.Ctrl);
    OO.Service = (function(_super) {
      __extends(Service, _super);

      Service.register = function(app, name) {
        var _ref;
        if (name == null) {
          name = this.name || ((_ref = this.toString().match(/function\s*(.*?)\(/)) != null ? _ref[1] : void 0);
        }
        if (typeof app === "string") {
          angular.module(app).service(name, this);
        } else {
          app.service(name, this);
        }
        return this;
      };

      function Service() {
        var args, index, key, _i, _len, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref = this.constructor.$inject;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          key = _ref[index];
          this[key] = args[index];
        }
        if (typeof this.initialize === "function") {
          this.initialize();
        }
      }

      return Service;

    })(OO.Injectable);
    OO.DataService = (function(_super) {
      __extends(DataService, _super);

      function DataService() {
        return DataService.__super__.constructor.apply(this, arguments);
      }

      DataService.inject("$resource", "$interval", "$q", "$timeout");

      DataService.prototype._db = function(api, _arg) {
        var _ref, _ref1;
        this.name = _arg.name, this.oneshot = _arg.oneshot, this.interval = _arg.interval;
        this.oneshot = this.oneshot === true || (this.interval == null);
        if (((_ref = this.db) != null ? _ref.busy : void 0) === true) {
          this.$timeout((function(_this) {
            return function() {
              if (_this.oneshot === true) {
                return _this.q.reject();
              } else {
                return _this.q.notify(false);
              }
            };
          })(this), 0);
        }
        this.q = this.$q.defer();
        this.db = {
          busy: false,
          ready: false,
          handle: api != null ? this.$resource(api) : null,
          store: []
        };
        if (this.oneshot === false) {
          (_ref1 = this.q.promise).then.apply(_ref1, [
            (function(_this) {
              return function() {
                return true;
              };
            })(this), (function(_this) {
              return function(notification) {
                return _this.$timeout(_this._api, _this.interval);
              };
            })(this), (function(_this) {
              return function() {
                return false;
              };
            })(this)
          ]);
        }
        this._api();
        return this.q.promise;
      };

      DataService.prototype._api = function() {
        if (this.db.busy === true) {
          return;
        }
        this.db.busy = true;
        return this.db.handle.get().$promise.then((function(_this) {
          return function(data) {
            var _ref, _ref1;
            console.info(((new Date()).toLocaleTimeString('en-US')) + " :: API/" + _this.name + ": Success");
            _this._store((_ref = data[_this.name]) != null ? _ref : data);
            _this.db.busy = false;
            if (_this.oneshot !== false) {
              if ((_ref1 = _this.q) != null) {
                _ref1.resolve();
              }
              _this.q = null;
              _this.q = _this.$q.defer();
            } else {
              _this.q.notify(true);
            }
            return _this.db.ready = true;
          };
        })(this))["catch"]((function(_this) {
          return function(err) {
            var _ref;
            console.warn(((new Date()).toLocaleTimeString('en-US')) + " :: API/" + _this.name + ": Error :: " + (err.toString()));
            if (_this.oneshot !== false) {
              if ((_ref = _this.q) != null) {
                _ref.reject();
              }
              _this.q = null;
              return _this.q = _this.$q.defer();
            } else {
              return _this.q.notify(false);
            }
          };
        })(this));
      };

      DataService.prototype._store = function(data) {
        var o, _data, _i, _j, _len, _len1, _ref, _results;
        _data = Object.prototype.toString.call(data) === "[object Array]" ? data : [data];
        _ref = this.db.store;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          o = _ref[_i];
          o.eligible = false;
        }
        _results = [];
        for (_j = 0, _len1 = _data.length; _j < _len1; _j++) {
          o = _data[_j];
          _results.push((function(_this) {
            return function(o) {
              var k, v;
              if (_this.db.store.filter(function(el, i, arr) {
                return el.id === o.id;
              }).length) {
                for (k in o) {
                  if (!__hasProp.call(o, k)) continue;
                  v = o[k];
                  _this.db.store[i][k] = o[k];
                }
                return _this.db.store[i].eligible = true;
              } else {
                _this.db.store.push(o);
                return _this.db.store[_this.db.store.length - 1].eligible = true;
              }
            };
          })(this)(o));
        }
        return _results;
      };

      return DataService;

    })(OO.Service);
    OO.DynamicDataService = (function(_super) {
      __extends(DynamicDataService, _super);

      function DynamicDataService() {
        return DynamicDataService.__super__.constructor.apply(this, arguments);
      }

      DynamicDataService.prototype.subscribe = function(callback, oneshot) {
        if (oneshot == null) {
          oneshot = false;
        }
        if (this.subscribers == null) {
          this.subscribers = [];
        }
        if (this.once_subscribers == null) {
          this.once_subscribers = [];
        }
        if (oneshot === true) {
          return this.once_subscribers.push(callback);
        } else {
          return this.subscribers.push(callback);
        }
      };

      DynamicDataService.prototype.aspects = function(injection, oneshot) {
        if (oneshot == null) {
          oneshot = false;
        }
        if (this.aspects == null) {
          this.aspects = [];
        }
        if (this.once_aspects == null) {
          this.once_aspects = [];
        }
        this.once_aspects.compact();
        if (oneshot === true) {
          return this.once_aspects.push(injection);
        } else {
          return this.aspects.push(injection);
        }
      };

      DynamicDataService.prototype.get = function(matcher) {
        return this.db.store.filter(function(el, i, arr) {
          var k, v, _ref;
          for (k in matcher) {
            if (!__hasProp.call(matcher, k)) continue;
            v = matcher[k];
            if (!((_ref = typeof v === "function" ? v(el[k]) : void 0) != null ? _ref : el[k] === v)) {
              return false;
            }
          }
          return true;
        });
      };

      DynamicDataService.prototype.set = function(opts) {
        var doc, i, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results;
        if (opts.i === -1) {
          _ref = this.db.store;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            doc = _ref[i];
            _results.push(doc[opts.prop] = (_ref1 = typeof opts.val === "function" ? opts.val(this.db, doc.id) : void 0) != null ? _ref1 : opts.val);
          }
          return _results;
        } else {
          return (_ref2 = this.db.store[(_ref3 = typeof opts.i === "function" ? opts.i(this.db) : void 0) != null ? _ref3 : opts.i]) != null ? _ref2[opts.prop] = (_ref4 = typeof opts.val === "function" ? opts.val(this.db, this.db.store[(_ref5 = typeof opts.i === "function" ? opts.i(this.db) : void 0) != null ? _ref5 : opts.i].id) : void 0) != null ? _ref4 : opts.val : void 0;
        }
      };

      DynamicDataService.prototype.digest = function() {
        var aspect, callback, d, i, once_aspect, _base, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
        if (this.db.ready === false) {
          return;
        }
        if ((_base = this.db).resolved == null) {
          _base.resolved = false;
        }
        _ref1 = (_ref = this.once_aspects) != null ? _ref : [];
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          once_aspect = _ref1[i];
          if (typeof once_aspect === "function") {
            once_aspect(this.db);
          }
          this.once_aspects[i] = null;
        }
        this.once_aspects = [];
        _ref2 = this.db.store;
        for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
          d = _ref2[i];
          if (d.eligible === false) {
            d.selected = false;
          } else if (d.selected === true) {
            this.db.current = d;
          } else if (d.selected == null) {
            d.selected = false;
          }
        }
        this.db.resolved = true;
        _ref4 = (_ref3 = this.aspects) != null ? _ref3 : [];
        for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
          aspect = _ref4[_k];
          aspect(this.db);
        }
        _ref6 = (_ref5 = this.once_subscribers) != null ? _ref5 : [];
        for (i = _l = 0, _len3 = _ref6.length; _l < _len3; i = ++_l) {
          callback = _ref6[i];
          if (typeof callback === "function") {
            callback(this.db);
          }
          this.once_subscribers[i] = null;
        }
        this.once_subscribers = [];
        _ref8 = (_ref7 = this.subscribers) != null ? _ref7 : [];
        for (_n = 0, _len4 = _ref8.length; _n < _len4; _n++) {
          callback = _ref8[_n];
          callback(this.db);
        }
        return true;
      };

      return DynamicDataService;

    })(OO.DataService);
    AbstractOneshotDataService = (function(_super) {
      __extends(AbstractOneshotDataService, _super);

      function AbstractOneshotDataService() {
        return AbstractOneshotDataService.__super__.constructor.apply(this, arguments);
      }

      AbstractOneshotDataService.prototype.initialize = function(path, descriptor) {
        this.promise = this._db(path, {
          name: descriptor,
          oneshot: true
        });
        return AbstractOneshotDataService.__super__.initialize.apply(this, arguments);
      };

      return AbstractOneshotDataService;

    })(OO.DynamicDataService);
    this.$get = function() {
      return OO;
    };
  });

}).call(this);
